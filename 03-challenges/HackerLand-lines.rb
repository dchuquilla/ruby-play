lights = [[2, 25, 90], [2, 66, 100], [2, 33, 58], [2, 47, 77], [2, 51, 59], [2, 35, 52], [2, 49, 66], [2, 21, 41], [2, 77, 93], [2, 66, 72], [2, 53, 82], [2, 27, 96], [3, 20, 67], [2, 19, 98], [2, 44, 57], [2, 8, 29], [2, 30, 99], [2, 62, 62], [2, 13, 81], [2, 3, 15], [2, 30, 31], [2, 90, 97], [2, 56, 94], [3, 75, 95], [2, 100, 100], [1, 99, 100], [2, 31, 42], [2, 55, 80], [3, 87, 88], [2, 47, 52], [2, 99, 100], [2, 57, 92], [2, 12, 21], [2, 18, 50], [2, 97, 97], [2, 97, 97], [2, 11, 22], [2, 29, 88], [3, 61, 71], [2, 86, 87], [2, 92, 97], [3, 67, 76], [1, 1, 74], [2, 39, 83], [2, 63, 94], [2, 17, 24], [2, 24, 62], [1, 89, 96], [2, 4, 17], [2, 65, 82], [2, 53, 89], [2, 95, 98], [2, 21, 35], [2, 63, 91], [2, 91, 100], [2, 55, 81], [2, 6, 94], [2, 96, 99], [2, 79, 87], [2, 38, 55], [2, 42, 92], [2, 91, 92], [2, 72, 74], [2, 92, 94], [2, 20, 30], [2, 39, 78], [2, 85, 87], [2, 24, 91], [2, 36, 95], [2, 85, 91], [2, 52, 72], [2, 23, 37], [2, 9, 14], [1, 46, 59], [2, 85, 97], [2, 99, 100], [2, 82, 86], [3, 19, 97], [2, 12, 67], [1, 20, 88], [2, 96, 97], [2, 67, 87], [3, 56, 96], [2, 75, 94], [3, 56, 63], [1, 51, 82], [2, 100, 100], [2, 90, 97], [2, 76, 97], [2, 95, 97], [2, 31, 57], [2, 1, 40], [3, 10, 87], [2, 18, 32], [2, 33, 46], [1, 82, 93], [2, 29, 94], [2, 75, 95], [2, 37, 88], [3, 87, 100]]
n = 100
m = 100

def getWhiteLightLength(n, m, lights)
  points = {1 => [], 2 => [], 3 => []}
  map = {}
  intersections = 0
  validate_lights = lights.map { |light| light.first }
  return 0 if validate_lights.uniq.sort != [1,2,3]
  lights.sort.map { |l| points[l[0]].concat( (l[1]..l[2]).to_a ) }
  points = points.map { |p| p.last.sort.uniq }
  points.flatten.each do |point|
    map[point] = ( map[point] || 0 ) + 1
    if map[point] == 3
      intersections += 1
    end
  end
  # p map
  intersections
end

p getWhiteLightLength(n, m, lights)
